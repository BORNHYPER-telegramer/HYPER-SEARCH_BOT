 from info import *
from utils import *
from client import User 
from pyrogram import Client, filters

@Client.on_message(filters.group & filters.command("connect"))
async def connect(bot, message):
    m=await message.reply("connecting..")
    user = await User.get_me()
    try:
       group     = await get_group(message.chat.id)
       user_id   = group["user_id"] 
       user_name = group["user_name"]
       verified  = group["verified"]
       channels  = group["channels"].copy()
    except :
       return await bot.leave_chat(message.chat.id)  
    if message.from_user.id!=user_id:
       return await m.edit(f"Only {user_name} ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö üòÅ")
    if bool(verified)==False:
       return await m.edit("T ú…™s ·¥Ñ ú·¥Ä·¥õ …™s …¥·¥è·¥õ ·¥†·¥á Ä…™“ì…™·¥á·¥Ö!\n·¥ús·¥á /verify")    
    try:
       channel = int(message.command[-1])
       if channel in channels:
          return await message.reply("T ú…™s ·¥Ñ ú·¥Ä…¥…¥·¥á ü …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö! Y·¥è·¥ú C·¥Ä…¥·¥õ C·¥è…¥…¥·¥á·¥Ñ·¥õ A…¢·¥Ä…™…¥")
       channels.append(channel)
    except:
       return await m.edit("‚ùå I…¥·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ “ì·¥è Ä·¥ç·¥Ä·¥õ!\n·¥ús·¥á `/connect C ú·¥Ä…¥…¥·¥á ü ID`")    
    try:
       chat   = await bot.get_chat(channel)
       group  = await bot.get_chat(message.chat.id)
       c_link = chat.invite_link
       g_link = group.invite_link
       await User.join_chat(c_link)
    except Exception as e:
       if "T ú·¥á ·¥ús·¥á Ä …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ä ·¥ò·¥Ä Ä·¥õ…™·¥Ñ…™·¥ò·¥Ä…¥·¥õ" in str(e):
          pass
       else:
          text = f"‚ùå Error: `{str(e)}`\nM·¥Ä·¥ã·¥á s·¥ú Ä·¥á I'·¥ç ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ ú·¥Ä…¥…¥·¥á ü & ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò ·¥°…™·¥õ ú ·¥Ä ü ü ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s ·¥Ä…¥·¥Ö {(user.username or user.mention)} …™s …¥·¥è·¥õ  ô·¥Ä…¥…¥·¥á·¥Ö ·¥õ ú·¥á Ä·¥á"
          return await m.edit(text)
    await update_group(message.chat.id, {"channels":channels})
    await m.edit(f"‚úÖ S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è [{chat.title}]({c_link})!", disable_web_page_preview=True)
    text = f"#NewConnection\n\nUser: {message.from_user.mention}\n…¢ Ä·¥è·¥ú·¥ò: [{group.title}]({g_link})\nC ú·¥Ä…¥…¥·¥á ü: [{chat.title}]({c_link})"
    await bot.send_message(chat_id=LOG_CHANNEL, text=text)


@Client.on_message(filters.group & filters.command("disconnect"))
async def disconnect(bot, message):
    m=await message.reply("P ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ..p")   
    try:
       group     = await get_group(message.chat.id)
       user_id   = group["user_id"] 
       user_name = group["user_name"]
       verified  = group["verified"]
       channels  = group["channels"].copy()
    except :
       return await bot.leave_chat(message.chat.id)  
    if message.from_user.id!=user_id:
       return await m.edit(f"Only {user_name} ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö üòÅ")
    if bool(verified)==False:
       return await m.edit("T ú…™s ·¥Ñ ú·¥Ä·¥õ …™s …¥·¥è·¥õ ·¥†·¥á Ä…™“ì…™·¥á·¥Ö!\n·¥ús·¥á /verify")    
    try:
       channel = int(message.command[-1])
       if channel not in channels:
          return await m.edit("Y·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ ú…™s ·¥Ñ ú·¥Ä…¥…¥·¥á ü  è·¥á·¥õ O Ä C ú·¥á·¥Ñ·¥ã C ú·¥Ä…¥…¥·¥á ü I·¥Ö")
       channels.remove(channel)
    except:
       return await m.edit("‚ùå I…¥·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ “ì·¥è Ä·¥ç·¥Ä·¥õ!\n·¥ús·¥á `/disconnect C ú·¥Ä…¥…¥·¥á ü I·¥Ö`")
    try:
       chat   = await bot.get_chat(channel)
       group  = await bot.get_chat(message.chat.id)
       c_link = chat.invite_link
       g_link = group.invite_link
       await User.leave_chat(channel)
    except Exception as e:
       text = f"‚ùå Error: `{str(e)}`\nM·¥Ä·¥ã·¥á s·¥ú Ä·¥á I'·¥ç ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ ú·¥Ä…¥…¥·¥á ü & ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò ·¥°…™·¥õ ú ·¥Ä ü ü ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s ·¥Ä…¥·¥Ö {(user.username or user.mention)} …™s …¥·¥è·¥õ  ô·¥Ä…¥…¥·¥á·¥Ö ·¥õ ú·¥á Ä·¥á"
       return await m.edit(text)
    await update_group(message.chat.id, {"channels":channels})
    await m.edit(f"‚úÖ S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö…™s·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö “ì Ä·¥è·¥ç [{chat.title}]({c_link})!", disable_web_page_preview=True)
    text = f"#DisConnection\n\nUser: {message.from_user.mention}\nG Ä·¥è·¥ú·¥ò: [{group.title}]({g_link})\nC ú·¥Ä…¥…¥·¥á ü: [{chat.title}]({c_link})"
    await bot.send_message(chat_id=LOG_CHANNEL, text=text)


@Client.on_message(filters.group & filters.command("connections"))
async def connections(bot, message):
    group     = await get_group(message.chat.id)    
    user_id   = group["user_id"]
    user_name = group["user_name"]
    channels  = group["channels"]
    f_sub     = group["f_sub"]
    if message.from_user.id!=user_id:
       return await message.reply(f"Only {user_name} ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö üòÅ")
    if bool(channels)==False:
       return await message.reply("T ú…™s …¢ Ä·¥è·¥ú·¥ò …™s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è ·¥Ä…¥ è ·¥Ñ ú·¥Ä…¥…¥·¥á üs!\nC·¥è…¥…¥·¥á·¥Ñ·¥õ ·¥è…¥·¥á ·¥ús…™…¥…¢ /connect")
    text = "T ú…™s G Ä·¥è·¥ú·¥ò …™s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è:\n\n"
    for channel in channels:
        try:
           chat = await bot.get_chat(channel)
           name = chat.title
           link = chat.invite_link
           text += f"üîóC·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö C ú·¥Ä…¥…¥·¥á ü - [{name}]({link})\n"
        except Exception as e:
           await message.reply(f"‚ùå E Ä Ä·¥è Ä …™…¥ `{channel}:`\n`{e}`")
    if bool(f_sub):
       try:
          f_chat  = await bot.get_chat(channel)
          f_title = f_chat.title
          f_link  = f_chat.invite_link
          text += f"\nFSub: [{f_title}]({f_link})"
       except Exception as e:
          await message.reply(f"‚ùå E Ä Ä·¥è Ä …™…¥ Fs·¥ú ô (`{f_sub}`)\n`{e}`")
   
    await message.reply(text=text, disable_web_page_preview=True)
